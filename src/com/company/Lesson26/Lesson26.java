package com.company.Lesson26;

public class Lesson26 {
    //если используем equals, то тип данных всегда object
    //equals должен быть симметричным (a=b когда b=a)
    //рефлексивность (a=a)
    //транзитивность (a=b;b=c;значит a=c)
    //постоянство (всегда один результат)

    //toString по умолчанию ClassName@hashCode

    transient String s; //transient не сериализуются -- при сериализации не записывается, используюется когда проще вычислить -- какое-то промежуточное состояние

    native void nativeMetod(); // реализованы не на Java, не имеют тела

    synchronized void sync(){}; // методы могут быть использованы только одним потоком в момент времени

    volatile int a=5; //обычно java создаёт копию значения для каждого потока, этот модификатор говорит что нужно всем потокам давать одну и ту же переменную

    strictfp void str(){}; //ограничивает точность для того чтобы обеспечить переносимость

    static {
        System.out.println("sa");
    }
    {
        //инициализатор -- код вне методов. срабатывает перед конструктором класса, но после конструктора суперкласса
        //сначала срабатывают static инициализаторы
        //может быть несколько, тогда будут сверху вниз
        //initializer block -- каждый раз, когда создаётся новый объект
        //static initializer block -- каждый раз, когда объект загружается в память -- то есть при первом вызове
        //часто используют анонимные классы
        s="44";
        //не может делать return
    }

    @Override
    public int hashCode() {
        int i = Integer.parseInt("50");
        return super.hashCode();
    }
}

//wrapper классы --
//autoboxing(автоматическая конвертация примитивных типов -- например, при добавлении примитивных типов в массив из врапперов),
//unboxing -- wrapper ведёт себя как примитивный тип -- например, поиск по массиву врапперов

//parse -- wrapper класс переводит string в себя

//при перегрузке может быть либо конвертация int в long, либо int в Object -- нельзя int в Long wrapper
//если нет перегрузки с примитивным типом данных, значение конвертируется в Wrapper (поэтому попадает на перегрузку Object)

